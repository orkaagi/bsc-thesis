@startuml

class Match {
}

abstract class Player {
- seat: SeatName
- hand: Map<SuitName, String>
+ Player(SeatName, String, String, String, String)
}

class Opponent {
+ Opponent(SeatName, String, String, String, String)
+ playCard(SuitName, int): void
}

class Declarer {
- strategy: Strategy
+ Declarer(SeatName, String, String, String, String, Strategy)
+ setStrategy(Strategy)
+ playCard(char[] round): Pair<String, Character>
}

abstract class Strategy {
- round: char[]
- observedSuits: Map<SeatName, Map<SuitName, String>>
+ Strategy()
+ <<abstract>> execute(SeatName seatName, Map<SuitName,
    String> hands, char[] round): Pair<String, char>
# updateObservedSuits(): void
# encodeHands(String): List<char>
}

class AutomaticStrategy {
+ AutomaticStrategy()
+ execute(SeatName seatName, Map<SuitName,
    String> hands, char[] round): Pair<String, char>
}

class AutomaticSmartStrategy {
+ AutomaticSmartStrategy()
+ execute(SeatName seatName, Map<SuitName,
    String> hands, char[] round): Pair<String, char>
}

Player <|-- Opponent
Player <|-- Declarer
Player <-- Match

Declarer o--> Strategy

Strategy <|-- AutomaticStrategy
Strategy <|-- AutomaticSmartStrategy

Node <.. AutomaticSmartStrategy

Match ..> AutomaticStrategy
Match ..> AutomaticSmartStrategy

@enduml